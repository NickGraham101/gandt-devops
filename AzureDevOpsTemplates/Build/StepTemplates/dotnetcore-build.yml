# GitVersion: if a GitVersion config file is required this should be stored at the root of the repo.  If the file doesn't exist GitVersion defaults will be used - https://gitversion.readthedocs.io/en/latest/
parameters:
  SolutionRootFolder: '' # must include final forward slash
  SolutionBaseName: ''
  BuildPlatform: 'any cpu'
  BuildConfiguration: 'release'
  DotNetCoreVersion: ''
  GitVersionTargetPath: '/'
  IncludePreviewVersions: false
  PublishWebApp: 'false'
  TestSuffix: Tests

steps:
 - task: UseDotNet@2
   displayName: 'Use .NET Core sdk ${{ parameters.DotNetCoreVersion }}'
   condition: ne('', '${{ parameters.DotNetCoreVersion }}')
   inputs:
     version: ${{ parameters.DotNetCoreVersion }}
     IncludePreviewVersions: ${{ parameters.IncludePreviewVersions }}

 - task: gittools.gittools.execute-gitversion-task.gitversion/execute@0
   displayName: gitversion/execute
   inputs:
     targetPath: ${{ parameters.GitVersionTargetPath }}
     useConfigFile: true
     configFilePath: GitVersion.yml

 # tasks to package a function app
 - task: DotNetCoreCLI@2
   displayName: 'Build - dotnet build application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs:
     command: 'build'
     projects: '${{ parameters.SolutionRootFolder }}${{ parameters.SolutionBaseName }}/${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o $(build.artifactstagingdirectory)/Build/${{ parameters.SolutionBaseName }}/ -c ${{ parameters.BuildConfiguration }}'

 - task: ArchiveFiles@2
   displayName: 'Archive Application ${{ parameters.SolutionBaseName }}'
   condition: not(${{ parameters.PublishWebApp }})
   inputs: 
     rootFolderOrFile: $(build.artifactstagingdirectory)/Build/${{ parameters.SolutionBaseName }}/
     archiveFile: $(build.artifactstagingdirectory)/Artifact/${{ parameters.SolutionBaseName }}/DeploymentPackages/${{ parameters.SolutionBaseName }}.zip
     includeRootFolder: false

# task to package a web app
 - task: DotNetCoreCLI@2
   displayName: 'Publish - dotnet publish application ${{ parameters.SolutionBaseName }}'
   condition: ${{ parameters.PublishWebApp }}
   inputs:
     command: 'publish'
     projects: '${{ parameters.SolutionRootFolder }}${{ parameters.SolutionBaseName }}/${{ parameters.SolutionBaseName }}.csproj'
     arguments: '-o $(build.artifactstagingdirectory)/Artifact/${{ parameters.SolutionBaseName }}/DeploymentPackages/ -c ${{ parameters.BuildConfiguration }}'
     publishWebProjects: false #set to false as this setting (which defaults to true) will parse the entire repo for web projects

 - task: DotNetCoreCLI@2
   displayName: 'Test - dotnet test application ${{ parameters.SolutionBaseName }}'
   inputs:
     command: test
     projects: '${{ parameters.SolutionRootFolder }}${{ parameters.SolutionBaseName }}.${{ parameters.TestSuffix }}/${{ parameters.SolutionBaseName }}.${{ parameters.TestSuffix }}.csproj'
     arguments: '--configuration ${{ parameters.BuildConfiguration }} --collect:"XPlat Code Coverage"'

 - task: PublishPipelineArtifact@1
   displayName: 'Publish Artifact: ${{ parameters.SolutionBaseName }}'
   inputs:
     targetPath: $(build.artifactstagingdirectory)/Artifact/${{ parameters.SolutionBaseName }}/DeploymentPackages/
     artifactName: ${{ parameters.SolutionBaseName }}.DeploymentPackages
